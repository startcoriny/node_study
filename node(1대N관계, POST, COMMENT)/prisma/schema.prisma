// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users{
  userId Int @id @default(autoincrement()) @map("userId") //타입지정할때 소문자 지정X
  email String @unique @map("email")
  password String @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updateAt DateTime @updatedAt @map("updateAt")

  userInfos UserInfos? // 사용자(Users) 테이블과 사용자 정보(UserInfos)테이블이 1:1관계를 맺습니다. 
  post Posts[] // 사용자(Users) 테이블과 게시글(Post) 테이블이 1:N 관계를 맺습니다.
  comments Comments[] // 사용자(Users) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.
  @@map("Users")
}

model UserInfos{
  userInfoId Int @id @default(autoincrement())
  userId Int @unique // 사용자(User) 테이블을 참조하는 외래키
  name String
  age Int
  gender String
  profileImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 //Users 테이블과 관계를 설정
  user Users @relation(fields: [userId], references: [userId],onDelete: Cascade)

  @@map("UserInfos")
}
// 1대 1연결 Users의 userId와 UserInfos의 userId - 사용자는 1개의 사용자 정보를 가지고 있다.

// 1 : 1 연결
// 1. 관계를 설정하려는 모델(UserInfos)에서 어떤 모델(Users)과 관계를 맺을지 설정해야합니다.
// 2. 관계를 맺게되는 모델(Users)에서 어떤 모델이 관계를 맺는지(UserInfos) 설정해야합니다.
// 3. 관계를 맺게되는 모델에서, 타입을 지정할 때, Optional Parameter(?)를 지정해줘야합니다. 정보가 없을수도 있기 때문
// 4. 관계를 맺어야 하는 모델(UserInfos)에서 참조할때는 int와 string이 아닌 참조할 모델(Users)을 지정합니다.
// 5. filed = 본인 model(UserInfos)에서 사용할 외래키 컬럼(userId)을 지정합니다.
// 6. references = key : 참조하려는 다른 모델(User)의 Column(userId)을 지정합니다.
// 7. onDelete || onUpdate = 참조하는 모델이 삭제 또는 수정될경우 어떤 행위를 할것인지 설정


model Posts{
  postId Int @id @default(autoincrement())
  userId Int // 사용자(Users) 테이블을 참조하는 외래키
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  

  //Users 테이블과 관계를 설정
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  comments Comments[] // 게시글(Posts) 테이블과 댓글(Comments) 테이블이 1:N 관계를 맺습니다.

  @@map("Post")
}
// 1 대 N 연결  Users의 유저는 여러개의 게시글(post)을 작성할수 있습니다.

// 1 : N 연결
// 1. 관계를 설정하려는 모델(Post)에서 어떤 모델(Users)과 관계를 맺을지 설정해야합니다.
// 2. 관계를 맺게되는 모델(Users)에서 어떤 모델이 관계를 맺는지(Post) 설정해야합니다.
// 3. 관계를 맺게되는 모델(Users)에서, 타입을 지정할 때, 배열 연산자([])를 작성해줘야합니다. 여러개의 게시글을 가질 수 있기 때문


model Comments{
  commentId Int @id @default(autoincrement())
  userId Int 
  postId Int
  content String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // N : M 연결

  // Posts 테이블과 관계를 설정합니다.
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  // Users 테이블과 관계를 설정합니다.
  post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
  @@map("Comments")
}
